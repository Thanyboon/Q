<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Sarabun', sans-serif; }
        .tab-active { 
            border-bottom: 2px solid #10b981; 
            color: #10b981; 
            background-color: #ecfdf5;
        }
        .content-section { display: none; }
        .content-section.active { display: block; }
        .modal {
            transition: opacity 0.25s ease;
        }
        .modal-active {
            display: flex;
        }
        .sidebar {
            transition: transform 0.3s ease-in-out;
        }
        .demo-container {
            position: relative;
            height: 600px; /* Fixed height for demo iframe-like behavior */
            overflow: hidden;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
        }
        /* Styles for the embedded demo app */
        .demo-container header { background-color: #3b82f6; color: white; padding: 1rem; display: flex; justify-content: space-between; align-items: center; }
        .demo-container h1 { font-size: 1.25rem; font-weight: bold; }
        .demo-container .menu-icon, .demo-container .cart-icon { font-size: 1.5rem; cursor: pointer; }
        .demo-container .cart-icon span { background-color: #ef4444; color: white; border-radius: 9999px; padding: 0.1rem 0.5rem; font-size: 0.75rem; position: relative; top: -0.5rem; left: -0.25rem; }
        .demo-container .sidebar { position: absolute; top: 0; left: 0; height: 100%; width: 250px; background-color: #1f2937; transform: translateX(-100%); z-index: 40; }
        .demo-container .sidebar.open { transform: translateX(0); }
        .demo-container .sidebar ul { list-style: none; padding: 0; margin-top: 4rem; }
        .demo-container .sidebar li { padding: 1rem 1.5rem; color: #d1d5db; cursor: pointer; }
        .demo-container .sidebar li:hover { background-color: #374151; color: white; }
        .demo-container .sidebar .close-btn { position: absolute; top: 1rem; right: 1rem; font-size: 2rem; color: white; cursor: pointer; }
        .demo-container main { padding: 1rem; display: grid; grid-template-columns: repeat(auto-fill, minmax(140px, 1fr)); gap: 1rem; max-height: 400px; overflow-y: auto; }
        .demo-container .product-item { background-color: white; padding: 1rem; border-radius: 0.5rem; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1); text-align: center; }
        .demo-container .product-item h3 { font-weight: bold; font-size: 0.875rem; min-height: 3rem; }
        .demo-container .product-item p { font-weight: 500; color: #3b82f6; margin: 0.5rem 0; }
        .demo-container .product-item button { background-color: #10b981; color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.375rem; cursor: pointer; font-size: 0.875rem; }
        .demo-container .modal { display: none; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center; z-index: 50; }
        .demo-container .modal-active { display: flex; }
        .demo-container .modal-content { background-color: white; padding: 1.5rem; border-radius: 0.5rem; width: 90%; max-width: 500px; max-height: 90%; overflow-y: auto; }
        .demo-container .modal-content .close-button { float: right; font-size: 1.5rem; cursor: pointer; }
        .demo-container #demo-order-items div { display: flex; justify-content: space-between; align-items: center; padding: 0.5rem 0; border-bottom: 1px dashed #e5e7eb; }
        .demo-container #demo-order-form input, .demo-container #demo-order-form textarea { width: 100%; padding: 0.5rem; border: 1px solid #d1d5db; border-radius: 0.25rem; margin-top: 0.25rem; }
        .demo-container .quantity-controls button { background-color: #3b82f6; color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 0.25rem; cursor: pointer; font-size: 0.75rem; }
        .demo-container .remove-item { background-color: #ef4444; margin-left: 0.5rem; }
        .demo-container .welcome-popup {
            display: flex;
            justify-content: center;
            align-items: center;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 102;
        }
        .demo-container .welcome-popup-content {
            background: white;
            padding: 1.5rem;
            border-radius: 0.5rem;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        .demo-container .welcome-popup-content button {
            background-color: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
            font-size: 1rem;
            margin-top: 1rem;
        }
        /* Excel Download Button Styling */
        #download-excel-btn {
            background-color: #22c55e; /* Green for Excel */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: bold;
            margin-top: 1rem;
            display: inline-block;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        #download-excel-btn:hover {
            background-color: #16a34a;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-800">‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á</h1>
            <p class="text-lg text-gray-600 mt-2">‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á</p>
        </header>

        <div class="bg-white rounded-lg shadow-xl">
            <nav class="flex border-b border-gray-200">
                <button data-tab="customer-view" class="tab-button flex-1 py-4 px-2 text-center font-semibold text-gray-600 hover:bg-gray-50 focus:outline-none tab-active">üõí ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (Customer View)</button>
                <button data-tab="store-orders" class="tab-button flex-1 py-4 px-2 text-center font-semibold text-gray-600 hover:bg-gray-50 focus:outline-none">üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ (Store Orders)</button>
                <button data-tab="about-system" class="tab-button flex-1 py-4 px-2 text-center font-semibold text-gray-600 hover:bg-gray-50 focus:outline-none">üí° ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</button>
            </nav>

            <div class="p-4 md:p-8">
                <section id="customer-view" class="content-section active">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold">‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>
                        <p class="text-gray-600">‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤, ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö</p>
                    </div>
                    <div id="customer-app-container" class="w-full max-w-4xl mx-auto border-2 border-gray-300 rounded-lg shadow-inner bg-gray-50 relative demo-container">
                        <div id="demo-welcome-popup" class="welcome-popup modal-active">
                            <div class="welcome-popup-content">
                                <h2 class="text-xl font-bold">‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!</h2>
                                <p class="my-4 text-gray-600">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>
                                <button id="demo-close-popup" class="w-full bg-blue-500 text-white py-2 rounded-lg">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</button>
                            </div>
                        </div>
                        <header>
                            <div class="menu-icon" id="demo-menu-icon">&#9776;</div>
                            <h1>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á</h1>
                            <div class="cart-icon" id="demo-cart-icon">üõí <span id="demo-cart-count">0</span></div>
                        </header>
                        <nav id="demo-sidebar" class="sidebar">
                            <button id="demo-close-sidebar" class="close-btn">&times;</button>
                            <ul>
                                <li data-category="set-moojoom">‡πÄ‡∏ã‡∏ï‡∏´‡∏°‡∏π‡∏à‡∏∏‡πà‡∏°</li>
                                <li data-category="set-sankor">‡πÄ‡∏ã‡∏ï‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡πÄ‡∏â‡∏¢‡πÜ</li>
                                <li data-category="set-samchan">‡πÄ‡∏ã‡∏ï‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏â‡∏¢‡πÜ</li>
                                <li data-category="pork">‡∏´‡∏°‡∏π</li>
                                <li data-category="beef">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠</li>
                                <li data-category="seafood">‡∏ó‡∏∞‡πÄ‡∏•</li>
                                <li data-category="processed-food">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ</li>
                            </ul>
                        </nav>
                        <main id="demo-product-list"></main>
                        <div id="demo-cart-modal" class="modal">
                            <div class="modal-content">
                                <span id="demo-close-cart" class="close-button">&times;</span>
                                <h2 class="text-xl font-bold mb-4">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h2>
                                <div id="demo-order-items"></div>
                                <div class="text-right font-bold my-4">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: <span id="demo-total-price">0</span> ‡∏ö‡∏≤‡∏ó</div>
                                <form id="demo-order-form">
                                    <h3 class="font-bold mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</h3>
                                    <input type="text" id="demo-customer-name" placeholder="‡∏ä‡∏∑‡πà‡∏≠" class="mb-2">
                                    <input type="tel" id="demo-customer-phone" placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" class="mb-2">
                                    <textarea id="demo-customer-address" placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" rows="2" class="mb-2"></textarea>
                                    <h3 class="font-bold mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
                                    <label class="mr-4"><input type="radio" name="payment-method" id="demo-payment-transfer" value="transfer" checked> ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</label>
                                    <label><input type="radio" name="payment-method" id="demo-payment-cash" value="cash"> ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</label>
                                    <div id="demo-transfer-slip-section" class="mt-2">
                                        <label for="demo-transfer-slip" class="block text-sm font-medium text-gray-700">‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</label>
                                        <input type="file" id="demo-transfer-slip" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
                                    </div>
                                    <button type="submit" class="w-full bg-blue-500 text-white py-2 rounded-lg mt-4">‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </section>

                <section id="store-orders" class="content-section">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)</h2>
                        <p class="text-gray-600">‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏ö‡∏ö Real-time</p>
                        <button id="download-excel-btn">‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Excel)</button>
                    </div>
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-4 overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡πÄ‡∏ß‡∏•‡∏≤</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">‡∏™‡∏•‡∏¥‡∏õ</th>
                                </tr>
                            </thead>
                            <tbody id="orders-table-body" class="bg-white divide-y divide-gray-200">
                                <tr>
                                    <td colspan="9" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center" id="no-orders-message">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>

                <section id="about-system" class="content-section">
                    <div class="text-center mb-6">
                        <h2 class="text-2xl font-bold">‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö</h2>
                        <p class="text-gray-600">‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö QR Code ‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</p>
                    </div>
                    <div class="grid md:grid-cols-2 gap-8 text-gray-700">
                        <div>
                            <h3 class="text-xl font-bold text-gray-800 mb-2">‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô (Frontend)</h3>
                            <p class="mb-4">‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏•‡∏∞‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ HTML, CSS, ‡πÅ‡∏•‡∏∞ JavaScript ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π, ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠, ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>
                            <ul class="list-disc list-inside space-y-1">
                                <li><strong>HTML:</strong> ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö</li>
                                <li><strong>CSS (Tailwind CSS):</strong> ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</li>
                                <li><strong>JavaScript:</strong> ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤, ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</li>
                            </ul>
                        </div>
                        <div>
                            <h3 class="text-xl font-bold text-gray-800 mb-2">‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏£‡πâ‡∏≤‡∏ô (Backend)</h3>
                            <p class="mb-4">‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ô‡∏µ‡πâ Backend ‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ JavaScript ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô</p>
                            <ul class="list-disc list-inside space-y-1">
                                <li><strong>‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å Frontend ‡∏ú‡πà‡∏≤‡∏ô API (‡∏à‡∏≥‡∏•‡∏≠‡∏á)</li>
                                <li><strong>‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô Google Sheets, MySQL, MongoDB)</li>
                                <li><strong>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô Line Notify, Email, ‡∏´‡∏£‡∏∑‡∏≠ Real-time Dashboard)</li>
                            </ul>
                        </div>
                        <div class="md:col-span-2">
                            <h3 class="text-xl font-bold text-gray-800 mb-2">‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞ QR Code</h3>
                            <p class="mb-4">‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ Frontend ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</p>
                            <p class="mb-4"><strong>QR Code:</strong> ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>

<script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
<script>
    // Global array to simulate backend database for orders
    const simulatedBackendOrders = [];

    // --- Main Application Logic ---
    const app = {
        init() {
            this.initTabs();
            this.injectCustomerApp();
            this.updateStoreOrdersDisplay(); // Initial display for store orders
            this.initExcelDownload(); // Initialize Excel download
        },

        initTabs() {
            const tabButtons = document.querySelectorAll('.tab-button');
            const contentSections = document.querySelectorAll('.content-section');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const tab = button.dataset.tab;

                    tabButtons.forEach(btn => {
                        btn.classList.remove('tab-active');
                    });
                    button.classList.add('tab-active');

                    contentSections.forEach(section => {
                        section.classList.remove('active');
                    });
                    document.getElementById(tab).classList.add('active');
                });
            });
        },

        // --- Simulated Backend Functionality ---
        processOrder(orderData) {
            // Simulate order ID and delivery queue generation
            const orderId = 'ORD-' + Math.random().toString(36).substr(2, 9).toUpperCase();
            const deliveryQueue = 'Q' + (Math.floor(Math.random() * 100) + 1);
            const timestamp = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });

            const fullOrder = {
                orderId: orderId,
                deliveryQueue: deliveryQueue,
                timestamp: timestamp,
                customer: orderData.customer,
                items: orderData.items,
                totalPrice: orderData.totalPrice,
                paymentMethod: orderData.paymentMethod,
                transferSlipPreview: orderData.transferSlipPreview || null // Store base64 image data
            };

            simulatedBackendOrders.push(fullOrder);
            this.updateStoreOrdersDisplay(); // Update store view immediately
            return { success: true, orderId: orderId, deliveryQueue: deliveryQueue };
        },

        updateStoreOrdersDisplay() {
            const ordersTableBody = document.getElementById('orders-table-body');
            ordersTableBody.innerHTML = ''; // Clear existing rows

            if (simulatedBackendOrders.length === 0) {
                ordersTableBody.innerHTML = `
                    <tr>
                        <td colspan="9" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center" id="no-orders-message">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</td>
                    </tr>
                `;
            } else {
                simulatedBackendOrders.forEach(order => {
                    const itemsText = order.items.map(item => {
                        let optionsDisplay = item.selectedOptions && item.selectedOptions.length > 0 ? ` (${item.selectedOptions.join(', ')})` : '';
                        return `${item.name}${optionsDisplay} (x${item.quantity})`;
                    }).join(', ');

                    const slipDisplay = order.transferSlipPreview ? 
                        `<a href="${order.transferSlipPreview}" target="_blank" class="text-blue-600 hover:underline">‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ</a>` : 
                        '-';

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${order.orderId}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.timestamp}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.customer.name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.customer.phone}</td>
                        <td class="px-6 py-4 text-sm text-gray-500">${order.customer.address}</td>
                        <td class="px-6 py-4 text-sm text-gray-500">${itemsText}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.totalPrice} ‡∏ö‡∏≤‡∏ó</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${order.paymentMethod === 'transfer' ? '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' : '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${slipDisplay}</td>
                    `;
                    ordersTableBody.appendChild(row);
                });
            }
        },

        initExcelDownload() {
            const downloadBtn = document.getElementById('download-excel-btn');
            if (downloadBtn) {
                downloadBtn.addEventListener('click', () => {
                    this.exportOrdersToExcel();
                });
            }
        },

        exportOrdersToExcel() {
            if (simulatedBackendOrders.length === 0) {
                alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î');
                return;
            }

            // Prepare data for Excel
            const ws_data = [
                ['‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)', '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', '‡∏™‡∏•‡∏¥‡∏õ']
            ];

            simulatedBackendOrders.forEach(order => {
                const itemsText = order.items.map(item => {
                    let optionsDisplay = item.selectedOptions && item.selectedOptions.length > 0 ? ` (${item.selectedOptions.join(', ')})` : '';
                    return `${item.name}${optionsDisplay} (x${item.quantity})`;
                }).join(', ');

                ws_data.push([
                    order.orderId,
                    order.timestamp,
                    order.customer.name,
                    order.customer.phone,
                    order.customer.address,
                    itemsText,
                    order.totalPrice,
                    order.paymentMethod === 'transfer' ? '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' : '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
                    order.transferSlipPreview ? '‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ (‡∏î‡∏π‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö)' : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ'
                ]);
            });

            const ws = XLSX.utils.aoa_to_sheet(ws_data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠");

            // Generate and download file
            XLSX.writeFile(wb, `‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠_${new Date().toLocaleDateString('th-TH')}.xlsx`);
            alert('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        },

        // --- Customer App (Frontend) Injection and Logic ---
        injectCustomerApp() {
            const container = document.getElementById('customer-app-container');
            // The HTML structure for the customer app is already within the main HTML
            // We just need to attach the JS logic to the elements within this container.

            const products = {
                'set-moojoom': [
                    { id: 'smj001', name: '‡πÄ‡∏ã‡∏ï‡∏´‡∏°‡∏π‡∏à‡∏∏‡πà‡∏°‡πÇ‡∏ö‡∏£‡∏≤‡∏ì', price: 159, type: 'set', options: ['‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡∏´‡∏°‡∏π‡∏ô‡∏∏‡πà‡∏°', '‡∏´‡∏°‡∏π‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô', '‡∏°‡∏≤‡∏°‡πà‡∏≤', '‡∏ï‡∏±‡∏ö', '‡πÑ‡∏Ç‡πà', '‡∏ä‡∏∏‡∏î‡∏ú‡∏±‡∏Å', '‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°', '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡πÑ‡∏Ç‡πà', '‡πÄ‡∏´‡πá‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏≠‡∏á'] },
                ],
                'set-sankor': [
                    { id: 'ssk001', name: '‡πÄ‡∏ã‡∏ï‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡πÄ‡∏â‡∏¢‡πÜ', price: 170, type: 'set', options: ['‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô', '‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°', '‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡∏´‡∏°‡∏π‡∏ô‡∏∏‡πà‡∏°', '‡∏´‡∏°‡∏π‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô', '‡∏°‡∏≤‡∏°‡πà‡∏≤', '‡∏ï‡∏±‡∏ö', '‡πÑ‡∏Ç‡πà', '‡∏ä‡∏∏‡∏î‡∏ú‡∏±‡∏Å', '‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°', '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡πÑ‡∏Ç‡πà', '‡πÄ‡∏´‡πá‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏≠‡∏á'] },
                ],
                'set-samchan': [
                    { id: 'ssc001', name: '‡πÄ‡∏ã‡∏ï‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏â‡∏¢‡πÜ', price: 179, type: 'set', options: ['‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô 3 ‡πÅ‡∏ñ‡∏ß', '‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏° ‡∏£‡∏≠‡∏ö‡∏´‡∏ô‡∏±‡∏á', '‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡∏ä‡∏≤‡∏ö‡∏π'], extra_options: ['‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', '‡∏´‡∏°‡∏π‡∏ô‡∏∏‡πà‡∏°', '‡∏´‡∏°‡∏π‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô', '‡∏°‡∏≤‡∏°‡πà‡∏≤', '‡∏ï‡∏±‡∏ö', '‡πÑ‡∏Ç‡πà', '‡∏ä‡∏∏‡∏î‡∏ú‡∏±‡∏Å', '‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°', '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡πÑ‡∏Ç‡πà', '‡πÄ‡∏´‡πá‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏≠‡∏á'] },
                ],
                'pork': [
                    { id: 'pork001', name: '‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡∏™‡πÑ‡∏•‡∏î‡πå 500 ‡∏Å‡∏£‡∏±‡∏°', price: 149 },
                    { id: 'pork002', name: '‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏° 500 ‡∏Å‡∏£‡∏±‡∏°', price: 149 },
                    { id: 'pork003', name: '‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô 3 ‡πÅ‡∏ñ‡∏ß 500 ‡∏Å‡∏£‡∏±‡∏°', price: 149 },
                    { id: 'pork004', name: '‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 245 },
                    { id: 'pork005', name: '‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô 500 ‡∏Å‡∏£‡∏±‡∏°', price: 139 },
                    { id: 'pork006', name: '‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô 500 ‡∏Å‡∏£‡∏±‡∏°', price: 145 },
                    { id: 'pork007', name: '‡∏´‡∏°‡∏π‡∏´‡∏°‡∏±‡∏Å‡∏ô‡∏∏‡πà‡∏° 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 105 },
                    { id: 'pork008', name: '‡∏´‡∏°‡∏π‡∏´‡∏°‡∏±‡∏Å‡∏á‡∏≤ 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 105 },
                    { id: 'pork009', name: '‡∏´‡∏°‡∏π‡∏´‡∏°‡∏±‡∏Å‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢‡∏î‡∏≥ 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 105 },
                    { id: 'pork010', name: '‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏°‡∏±‡∏Å‡∏ô‡∏∏‡πà‡∏° 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 189 },
                    { id: 'pork011', name: '‡∏ï‡∏±‡∏ö 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 125 },
                    { id: 'pork012', name: '‡∏´‡∏°‡∏π‡∏ö‡∏î 1 ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°', price: 100 },
                    { id: 'pork013', name: '‡∏´‡∏°‡∏π‡∏´‡∏°‡∏±‡∏Å‡∏ô‡∏∏‡πà‡∏° MPork', price: 119 },
                    { id: 'pork014', name: '‡∏´‡∏°‡∏π‡∏´‡∏°‡∏±‡∏Å‡∏á‡∏≤ MPork', price: 119 },
                    { id: 'pork015', name: '‡∏´‡∏°‡∏π‡∏´‡∏°‡∏±‡∏Å‡∏û‡∏£‡∏¥‡∏Å‡πÑ‡∏ó‡∏¢‡∏î‡∏≥ MPork', price: 119 },
                ],
                'beef': [
                    { id: 'beef001', name: '‡πÄ‡∏™‡∏∑‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡∏≠‡∏≠‡∏™‡πÄ‡∏ï‡πÄ‡∏•‡∏µ‡∏¢ 500 ‡∏Å‡∏£‡∏±‡∏°', price: 209 },
                    { id: 'beef002', name: '‡∏ô‡πà‡∏≠‡∏á‡∏•‡∏≤‡∏¢ 200 ‡∏Å‡∏£‡∏±‡∏°', price: 99 },
                    { id: 'beef003', name: '‡πÄ‡∏ö‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ 200 ‡∏Å‡∏£‡∏±‡∏°', price: 99 },
                    { id: 'beef004', name: '‡πÄ‡∏™‡∏∑‡∏≠‡∏≠‡∏≠‡∏™ 200 ‡∏Å‡∏£‡∏±‡∏°', price: 99 },
                    { id: 'beef005', name: '‡∏•‡∏¥‡πâ‡∏ô‡∏™‡πÑ‡∏•‡∏î‡πå 200 ‡∏Å‡∏£‡∏±‡∏°', price: 99 },
                ],
                'seafood': [
                    { id: 'sea001', name: '‡∏´‡∏°‡∏∂‡∏Å‡∏Å‡∏£‡∏≠‡∏ö 500 ‡∏Å‡∏£‡∏±‡∏°', price: 60 },
                    { id: 'sea002', name: '‡∏Å‡∏∏‡πâ‡∏á‡πÄ‡∏î‡πâ‡∏á 40‚Äî50 ‡∏ï‡∏±‡∏ß', price: 159 },
                    { id: 'sea003', name: '‡∏õ‡∏•‡∏≤‡∏´‡∏°‡∏∂‡∏Å‡∏ö‡∏±‡πâ‡∏á', price: 100 },
                    { id: 'sea004', name: '‡∏õ‡∏•‡∏≤‡∏´‡∏°‡∏∂‡∏Å‡∏ß‡∏á', price: 100 },
                    { id: 'sea005', name: '‡∏õ‡∏•‡∏≤‡∏î‡∏≠‡∏•‡∏•‡∏µ‡πà‡∏´‡∏±‡πà‡∏ô', price: 95 },
                    { id: 'sea006', name: '‡∏´‡∏≠‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏†‡∏π‡πà‡πÅ‡∏Å‡∏∞', price: 129 },
                    { id: 'sea007', name: '‡∏´‡∏≠‡∏¢‡πÅ‡∏°‡∏•‡∏á‡∏†‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏ù‡∏≤', price: 139 },
                ],
                'processed-food': [
                    { id: 'pf001', name: '‡∏°‡∏¥‡∏ô‡∏¥‡πÄ‡∏õ‡∏≤‡∏ó‡∏π‡πÇ‡∏ó‡∏ô‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà‡∏Å‡∏∏‡πâ‡∏á', price: 25 },
                    { id: 'pf002', name: '‡∏°‡∏¥‡∏ô‡∏¥‡∏ü‡∏≠‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏ä‡∏µ‡∏™', price: 25 },
                    { id: 'pf003', name: '‡∏°‡∏¥‡∏ô‡∏¥‡∏ä‡∏¥‡∏Å‡∏π‡∏ß‡πà‡∏≤', price: 20 },
                    { id: 'pf004', name: '‡∏õ‡∏•‡∏≤‡∏°‡πâ‡∏ß‡∏ô‡πÑ‡∏Ç‡πà‡πÄ‡∏Ñ‡πá‡∏° 500 ‡∏Å‡∏£‡∏±‡∏°', price: 99 },
                    { id: 'pf005', name: '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏ä‡∏µ‡∏™ 500 ‡∏Å‡∏£‡∏±‡∏°', price: 95 },
                    { id: 'pf006', name: '‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö‡∏ü‡∏¥‡∏ï‡∏ö‡∏±‡∏ô', price: 99 },
                    { id: 'pf007', name: '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏õ‡∏•‡∏≤', price: 85 },
                    { id: 'pf008', name: '‡∏ã‡∏π‡∏ã‡∏π‡∏ü‡∏¥‡∏ï‡∏ö‡∏±‡∏ô', price: 90 },
                    { id: 'pf009', name: '‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏´‡∏°‡∏π‡∏õ‡πâ‡∏≤‡∏õ‡∏¥‡πã', price: 55 },
                    { id: 'pf010', name: '‡∏•‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏õ‡πâ‡∏≤‡∏õ‡∏¥‡πã', price: 55 },
                    { id: 'pf011', name: '‡∏ó‡∏π‡πÇ‡∏ó‡∏ô‡∏ä‡∏¥‡∏ä‡∏∞‡πÇ‡∏°‡∏∞', price: 95 },
                    { id: 'pf012', name: '‡∏õ‡∏π‡∏≠‡∏±‡∏î‡πÑ‡∏™‡πâ‡∏ä‡∏µ‡∏™', price: 85 },
                    { id: 'pf013', name: '‡∏õ‡∏π‡∏≠‡∏±‡∏î‡πÄ‡∏ö‡∏ô‡πÇ‡∏ï‡∏∞', price: 89 },
                    { id: 'pf014', name: '‡πÄ‡∏õ‡∏≤‡∏ó‡∏π‡πÇ‡∏ó‡∏ô‡πÑ‡∏™‡πâ‡πÑ‡∏Ç‡πà‡∏Å‡∏∏‡πâ‡∏á', price: 95 },
                    { id: 'pf015', name: '‡πÑ‡∏Ç‡πà‡∏´‡∏ß‡∏≤‡∏ô', price: 65 },
                    { id: 'pf016', name: '‡∏ü‡∏≠‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏ä‡∏µ‡∏™', price: 99 },
                    { id: 'pf017', name: '‡∏ü‡∏≠‡∏á‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î', price: 90 },
                    { id: 'pf018', name: '‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏õ‡∏•‡∏≤‡∏ô‡∏≤‡∏°‡∏¥', price: 45 },
                    { id: 'pf019', name: '‡∏°‡∏¥‡∏ô‡∏¥‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏°‡πá‡∏Å‡∏ô‡∏±‡πà‡∏°', price: 25 },
                    { id: 'pf020', name: '‡∏Å‡∏∏‡πâ‡∏á‡πÅ‡∏°‡πâ‡∏Å‡∏ô‡∏±‡πà‡∏°', price: 75 },
                ]
            };

            const menuOptionsPrices = {
                '‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô': 10, '‡∏´‡∏°‡∏π‡∏ô‡∏∏‡πà‡∏°': 20, '‡∏´‡∏°‡∏π‡∏™‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô': 30, '‡∏°‡∏≤‡∏°‡πà‡∏≤': 10, '‡∏ï‡∏±‡∏ö': 20, '‡πÑ‡∏Ç‡πà': 10, '‡∏ä‡∏∏‡∏î‡∏ú‡∏±‡∏Å': 25, '‡∏ô‡πâ‡∏≥‡∏à‡∏¥‡πâ‡∏°': 35, '‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ‡πÑ‡∏Ç‡πà': 10, '‡πÄ‡∏´‡πá‡∏î‡πÄ‡∏Ç‡πá‡∏°‡∏ó‡∏≠‡∏á': 15,
                '‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô': 10, '‡∏™‡∏±‡∏ô‡∏Ñ‡∏≠‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°': 10
            };

            let customerCart = [];

            // Get references to elements within the customer app container
            const productListDiv = container.querySelector('#demo-product-list');
            const orderItemsDiv = container.querySelector('#demo-order-items');
            const cartCountSpan = container.querySelector('#demo-cart-count');
            const totalPriceSpan = container.querySelector('#demo-total-price');
            const demoCartModal = container.querySelector('#demo-cart-modal');
            const demoOrderForm = container.querySelector('#demo-order-form');
            const demoWelcomePopup = container.querySelector('#demo-welcome-popup');
            const demoSidebar = container.querySelector('#demo-sidebar');
            const demoPaymentTransferRadio = container.querySelector('#demo-payment-transfer');
            const demoTransferSlipSection = container.querySelector('#demo-transfer-slip-section');
            const demoPaymentCashRadio = container.querySelector('#demo-payment-cash'); // Declared here

            // Attach event listeners with null checks
            const demoClosePopupBtn = container.querySelector('#demo-close-popup');
            if (demoClosePopupBtn && demoWelcomePopup) {
                demoClosePopupBtn.addEventListener('click', () => {
                    demoWelcomePopup.classList.remove('modal-active');
                    loadProducts('set-moojoom'); // Load default category after closing popup
                });
            }
            
            const demoMenuIcon = container.querySelector('#demo-menu-icon');
            if (demoMenuIcon && demoSidebar) {
                demoMenuIcon.addEventListener('click', () => {
                    demoSidebar.classList.add('open');
                });
            }

            const demoCloseSidebarBtn = container.querySelector('#demo-close-sidebar');
            if (demoCloseSidebarBtn && demoSidebar) {
                demoCloseSidebarBtn.addEventListener('click', () => {
                    demoSidebar.classList.remove('open');
                });
            }

            container.querySelectorAll('#demo-sidebar li').forEach(item => {
                if (item) { // Null check for item
                    item.addEventListener('click', (e) => {
                        const category = e.target.dataset.category;
                        loadProducts(category);
                        if (demoSidebar) demoSidebar.classList.remove('open');
                    });
                }
            });

            function loadProducts(category) {
                if (!productListDiv) return; // Ensure productListDiv exists
                productListDiv.innerHTML = '';
                const currentProducts = products[category];
                if (currentProducts) {
                    currentProducts.forEach(product => {
                        const productItem = document.createElement('div');
                        productItem.classList.add('product-item');
                        productItem.innerHTML = `
                            <h3>${product.name}</h3>
                            <p>${product.price} ‡∏ö‡∏≤‡∏ó</p>
                            <button data-id="${product.id}" data-name="${product.name}" data-price="${product.price}"
                                    data-type="${product.type || ''}"
                                    data-options='${JSON.stringify(product.options || [])}'
                                    data-extra-options='${JSON.stringify(product.extra_options || [])}'>‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
                        `;
                        productListDiv.appendChild(productItem);
                    });
                    addAddToCartListeners();
                }
            }

            function addAddToCartListeners() {
                container.querySelectorAll('.product-item button').forEach(button => {
                    if (button) { // Null check for button
                        button.addEventListener('click', (e) => {
                            const id = e.target.dataset.id;
                            const name = e.target.dataset.name;
                            const price = parseFloat(e.target.dataset.price);
                            const type = e.target.dataset.type;
                            const options = JSON.parse(e.target.dataset.options);
                            const extraOptions = JSON.parse(e.target.dataset.extraOptions);

                            let selectedOptions = [];
                            let totalItemPrice = price;

                            if (type === 'set' && options.length > 0) {
                                let optionsPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${name} (‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)?\n`;
                                options.forEach(option => {
                                    optionsPrompt += `- ${option} (${menuOptionsPrices[option] || 0} ‡∏ö‡∏≤‡∏ó)\n`;
                                });
                                const chosenOptions = prompt(optionsPrompt + "\n‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏•‡∏π‡∏Å‡∏ô‡πâ‡∏≥ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô, ‡∏´‡∏°‡∏π‡∏ô‡∏∏‡πà‡∏°)");
                                if (chosenOptions) {
                                    selectedOptions = chosenOptions.split(',').map(opt => opt.trim()).filter(opt => opt !== '');
                                    selectedOptions.forEach(option => {
                                        if (menuOptionsPrices[option]) {
                                            totalItemPrice += menuOptionsPrices[option];
                                        }
                                    });
                                }
                            }
                            if (type === 'set' && extraOptions.length > 0) {
                                let extraOptionsPrompt = `‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${name} ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n`;
                                extraOptions.forEach((option, index) => {
                                    extraOptionsPrompt += `${index + 1}. ${option}\n`;
                                });
                                const chosenExtraOption = prompt(extraOptionsPrompt + "\n‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
                                if (chosenExtraOption) {
                                    if (extraOptions.includes(chosenExtraOption.trim())) {
                                        selectedOptions.push(chosenExtraOption.trim());
                                    } else {
                                        alert("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
                                        return;
                                    }
                                } else {
                                    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏ï‡∏ô‡∏µ‡πâ");
                                    return;
                                }
                            }

                            addToCart({ id, name, price: totalItemPrice, quantity: 1, originalPrice: price, selectedOptions, type });
                        });
                    }
                });
            }

            function addToCart(product) {
                const existingItemIndex = customerCart.findIndex(item => item.id === product.id && JSON.stringify(item.selectedOptions) === JSON.stringify(product.selectedOptions));

                if (existingItemIndex > -1) {
                    customerCart[existingItemIndex].quantity++;
                    let optionsPrice = product.selectedOptions.reduce((sum, option) => sum + (menuOptionsPrices[option] || 0), 0);
                    customerCart[existingItemIndex].price = (customerCart[existingItemIndex].originalPrice + optionsPrice) * customerCart[existingItemIndex].quantity;
                } else {
                    let optionsPrice = product.selectedOptions.reduce((sum, option) => sum + (menuOptionsPrices[option] || 0), 0);
                    product.price = product.originalPrice + optionsPrice;
                    customerCart.push(product);
                }
                updateCartDisplay();
            }

            function updateCartDisplay() {
                if (!orderItemsDiv || !totalPriceSpan || !cartCountSpan) return; // Ensure elements exist
                orderItemsDiv.innerHTML = '';
                let total = 0;
                let totalItemsInCart = 0;

                if (customerCart.length === 0) {
                    orderItemsDiv.innerHTML = '<p class="text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>';
                } else {
                    customerCart.forEach(item => {
                        const itemDiv = document.createElement('div');
                        itemDiv.innerHTML = `
                            <span>${item.name} ${item.selectedOptions && item.selectedOptions.length > 0 ? '(' + item.selectedOptions.join(', ') + ')' : ''}</span>
                            <div class="flex items-center">
                                <div class="quantity-controls flex items-center space-x-1 mr-2">
                                    <button data-id="${item.id}" data-options='${JSON.stringify(item.selectedOptions)}' class="decrease-quantity">-</button>
                                    <span class="w-6 text-center">${item.quantity}</span>
                                    <button data-id="${item.id}" data-options='${JSON.stringify(item.selectedOptions)}' class="increase-quantity">+</button>
                                </div>
                                <span>${item.price} ‡∏ö‡∏≤‡∏ó</span>
                                <button data-id="${item.id}" data-options='${JSON.stringify(item.selectedOptions)}' class="remove-item">‡∏•‡∏ö</button>
                            </div>
                        `;
                        orderItemsDiv.appendChild(itemDiv);
                        total += item.price;
                        totalItemsInCart += item.quantity;
                    });
                }

                totalPriceSpan.textContent = total;
                cartCountSpan.textContent = totalItemsInCart;

                addQuantityControlListeners();
            }

            function addQuantityControlListeners() {
                container.querySelectorAll('.increase-quantity').forEach(button => {
                    if (button) { // Null check
                        button.addEventListener('click', (e) => {
                            const id = e.target.dataset.id;
                            const options = JSON.parse(e.target.dataset.options);
                            const item = customerCart.find(i => i.id === id && JSON.stringify(i.selectedOptions) === JSON.stringify(options));
                            if (item) {
                                item.quantity++;
                                let optionsPrice = item.selectedOptions.reduce((sum, option) => sum + (menuOptionsPrices[option] || 0), 0);
                                item.price = (item.originalPrice + optionsPrice) * item.quantity;
                            }
                            updateCartDisplay();
                        });
                    }
                });

                container.querySelectorAll('.decrease-quantity').forEach(button => {
                    if (button) { // Null check
                        button.addEventListener('click', (e) => {
                            const id = e.target.dataset.id;
                            const options = JSON.parse(e.target.dataset.options);
                            const itemIndex = customerCart.findIndex(i => i.id === id && JSON.stringify(i.selectedOptions) === JSON.stringify(options));
                            if (itemIndex > -1) {
                                if (customerCart[itemIndex].quantity > 1) {
                                    customerCart[itemIndex].quantity--;
                                    let optionsPrice = customerCart[itemIndex].selectedOptions.reduce((sum, option) => sum + (menuOptionsPrices[option] || 0), 0);
                                    customerCart[itemIndex].price = (customerCart[itemIndex].originalPrice + optionsPrice) * customerCart[itemIndex].quantity;
                                } else {
                                    customerCart.splice(itemIndex, 1);
                                }
                            }
                            updateCartDisplay();
                        });
                    }
                });

                container.querySelectorAll('.remove-item').forEach(button => {
                    if (button) { // Null check
                        button.addEventListener('click', (e) => {
                            const id = e.target.dataset.id;
                            const options = JSON.parse(e.target.dataset.options);
                            customerCart = customerCart.filter(item => !(item.id === id && JSON.stringify(item.selectedOptions) === JSON.stringify(options)));
                            updateCartDisplay();
                        });
                    }
                });
            }

            const demoCartIcon = container.querySelector('#demo-cart-icon');
            if (demoCartIcon && demoCartModal) {
                demoCartIcon.addEventListener('click', () => {
                    demoCartModal.classList.add('modal-active');
                    updateCartDisplay();
                });
            }

            const demoCloseCartBtn = container.querySelector('#demo-close-cart');
            if (demoCloseCartBtn && demoCartModal) {
                demoCloseCartBtn.addEventListener('click', () => {
                    demoCartModal.classList.remove('modal-active');
                });
            }

            if (demoOrderForm) {
                demoOrderForm.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    if (customerCart.length === 0) {
                        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠');
                        return;
                    }

                    const customerNameInput = container.querySelector('#demo-customer-name');
                    const customerPhoneInput = container.querySelector('#demo-customer-phone');
                    const customerAddressInput = container.querySelector('#demo-customer-address');
                    const paymentMethodRadio = container.querySelector('input[name="payment-method"]:checked');
                    const transferSlipInput = container.querySelector('#demo-transfer-slip');

                    const customerName = customerNameInput ? customerNameInput.value : '';
                    const customerPhone = customerPhoneInput ? customerPhoneInput.value : '';
                    const customerAddress = customerAddressInput ? customerAddressInput.value : '';
                    const paymentMethod = paymentMethodRadio ? paymentMethodRadio.value : '';
                    const transferSlip = transferSlipInput ? transferSlipInput.files[0] : null;

                    if (!customerName || !customerPhone || !customerAddress) {
                        alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                        return;
                    }

                    let transferSlipPreview = null;
                    if (paymentMethod === 'transfer') {
                        if (!transferSlip) {
                            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
                            return;
                        }
                        // Read file as Data URL for preview
                        transferSlipPreview = await new Promise((resolve) => {
                            const reader = new FileReader();
                            reader.onloadend = () => resolve(reader.result);
                            reader.readAsDataURL(transferSlip);
                        });
                    }

                    const orderData = {
                        customer: {
                            name: customerName,
                            phone: customerPhone,
                            address: customerAddress
                        },
                        items: customerCart,
                        totalPrice: parseFloat(totalPriceSpan.textContent),
                        paymentMethod: paymentMethod,
                        transferSlipPreview: transferSlipPreview
                    };

                    // Simulate sending to backend
                    const backendResponse = app.processOrder(orderData);

                    if (backendResponse.success) {
                        alert(`‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${backendResponse.orderId}\n‡∏Ñ‡∏¥‡∏ß‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${backendResponse.deliveryQueue}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ó‡∏≤‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤`);
                        customerCart = [];
                        updateCartDisplay();
                        demoCartModal.classList.remove('modal-active');
                        demoOrderForm.reset();
                        if (demoTransferSlipSection) demoTransferSlipSection.style.display = 'block'; // Reset display state for transfer slip
                    } else {
                        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
                    }
                });
            }

            // Initial load of products for the demo app
            loadProducts('set-moojoom');

            // Attach payment method toggle listener for demo app
            if (demoPaymentTransferRadio && demoTransferSlipSection) {
                demoPaymentTransferRadio.addEventListener('change', () => {
                    if (demoPaymentTransferRadio.checked) {
                        demoTransferSlipSection.style.display = 'block';
                    }
                });
            }
            if (demoPaymentCashRadio && demoTransferSlipSection) {
                demoPaymentCashRadio.addEventListener('change', () => {
                    if (demoPaymentCashRadio.checked) {
                        demoTransferSlipSection.style.display = 'none';
                    }
                });
            }
        }
    };

    // Initialize the main application
    app.init();
</script>

</body>
</html>
